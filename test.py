# Todas las prueba sunitarias importan la biblioteca unittest
import unittest
# Las pruebas importan los modulos que hacen el trabajo
import MTO

# descediente de unittest.TestCase
class Test(unittest.TestCase):
    # Casos de prueba de encriptacion
    # Cada prueba unitaria es un metodo la clase
    def testNormal1(self):
        Entrance = "Hola Mundo"
        Key = 1234
        mi_motor = MTO.MotorEncriptacion(Key)
        "mensaje_encriptado = mi_motor.encriptar(Entrance)"
        # Cada metodo de prueba debe llamar un metodo assert
        # Proceso
        result = mi_motor.encriptar(Entrance)
        #Esperado
        expected = "‘ö’Å‘æ‘≥”≤‘ü’á’Ä‘∂’Å"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    def testNormal2(self):
        Entrance = "mE-Llamo-dAvId"
        Key = 14074
        mi_motor = MTO.MotorEncriptacion(Key)
        "mensaje_encriptado = mi_motor.encriptar(Entrance)"
        # Cada metodo de prueba debe llamar un metodo assert
        # Proceso
        result = mi_motor.encriptar(Entrance)
        #Esperado
        expected = "„ùß„úø„úß„ùÜ„ù¶„ùõ„ùß„ù©„úß„ùû„úª„ù∞„ùÉ„ùû"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    
    def testNormal3(self):
        Entrance = "420"
        Key = 14074
        mi_motor = MTO.MotorEncriptacion(Key)
        "mensaje_encriptado = mi_motor.encriptar(Entrance)"
        # Cada metodo de prueba debe llamar un metodo assert
        # Proceso
        result = mi_motor.encriptar(Entrance)
        #Esperado
        expected = "„úÆ„ú¨„ú™"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    def testEmptyMessage(self):
        Entrance = " "
        Key = 14074
        mi_motor = MTO.MotorEncriptacion(Key)
        
        try:
            result = mi_motor.encriptar(Entrance)
            self.assertEqual(result," ")
        
        except MTO.EmptyMessage:
            print("Expeci√≥n Ocurrida")

        # para comprobar si la prueba pasa
        
    
    def testEmojiMessage( self ):
         # Mensaje con emojis
        Entrance = "üòäüòäüòäüòä"
        Key = 1234

        # Crear el motor de encriptaci√≥n
        mi_motor = MTO.MotorEncriptacion(Key)

        # Proceso de encriptaci√≥n
        mensaje_encriptado = mi_motor.encriptar(Entrance)

        # Proceso de desencriptaci√≥n
        mensaje_desencriptado = mi_motor.desencriptar(mensaje_encriptado)

        # Comprobar que el mensaje desencriptado sea igual al original
        self.assertEqual(mensaje_desencriptado, Entrance)

        pass
    def testMessageSinograms(self):
        pass


    def MinimunCharacterKey( self ):
        pass

    def testKeyWithLetters( self):# Mensaje original
        Entrance = "Hola Mundo"
        
        # Clave con letras
        Key = "Hardkey"

        # Crear el motor de encriptaci√≥n
        mi_motor = MTO.MotorEncriptacion(Key)

        # Proceso de encriptaci√≥n
        mensaje_encriptado = mi_motor.encriptar(Entrance)

        # Proceso de desencriptaci√≥n
        mensaje_desencriptado = mi_motor.desencriptar(mensaje_encriptado)

        # Comprobar que el mensaje desencriptado sea igual al original
        self.assertEqual(mensaje_desencriptado, Entrance)

        pass
        
    def KeyWithSpaces( self ):
        pass

    def KeyWithCharacters( self ):
        pass

    #Casos de prueba de Desencripci√≥n
    
    def testCurrentKey(self):
        Entrance = "‘ö’Å‘æ‘≥”≤‘ü’á’Ä‘∂’Å"
        Key = 1234
        mi_motor = MTO.MotorEncriptacion(Key)
        "mensaje_encriptado = mi_motor.encriptar(Entrance)"

        result = mi_motor.desencriptar(Entrance)
        #Esperado
        expected = "Hola Mundo"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    def testMessageNumber(self):
        Entrance = "‘Ç‘É‘Ñ‘É‘Ç"
        Key = 1232
        mi_motor = MTO.MotorEncriptacion(Key)
        "mensaje_encriptado = mi_motor.encriptar(Entrance)"
        # Cada metodo de prueba debe llamar un metodo assert
        # Proceso
        result = mi_motor.desencriptar(Entrance)
        #Esperado
        expected = "23432"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    
    def testCharacterMessage(self):
        Entrance = "‡®£‡®∞‡©ï‡®§‡®ù‡™µ"
        Key = 2550
        mi_motor = MTO.MotorEncriptacion(Key)
        "mensaje_encriptado = mi_motor.encriptar(Entrance)"
        # Cada metodo de prueba debe llamar un metodo assert
        # Proceso
        result = mi_motor.desencriptar(Entrance)
        #Esperado
        expected = "-:_.'¬ø"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

def testModifiedEncryptedMessage(self):
    # Mensaje encriptado modificado
    encrypted_message = "‘Ç‘É‘Ñ‘É‘Ç"
    # Cambia un car√°cter del mensaje encriptado
    modified_encrypted_message = list(encrypted_message)
    # Por ejemplo, cambia el primer car√°cter de "‘Ç" a "‘É"
    modified_encrypted_message[0] = "j"
    modified_encrypted_message = "".join(modified_encrypted_message)

    # Clave y motor de encriptaci√≥n
    Key = 1232
    mi_motor = MTO.MotorEncriptacion(Key)

    # Proceso de desencriptaci√≥n
    result = mi_motor.desencriptar(modified_encrypted_message)

    # Comprobaci√≥n
    # Se espera que la desencriptaci√≥n falle o produzca un resultado diferente
    self.assertNotEqual("23432", result)
   
    def testEmptyMessage( self ):
        pass
    def NoneMessage(self):
        pass


    def testIncorectKey( self ):
        pass

    def testUnencryptedmessage( self ):
        pass
        
    def testCorruptMessage( self ):
        pass

    def testEmptyKey( self ):
        pass

        






# Este fragmento de codigo permite ejecutar la prueb individualmente
# Va fijo en todas las pruebas
if __name__ == '__main__':
    # print( Payment.calcularCuota.__doc__)
    unittest.main()
