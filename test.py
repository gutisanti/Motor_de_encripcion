# Todas las prueba sunitarias importan la biblioteca unittest
import unittest
# Las pruebas importan los modulos que hacen el trabajo
import MTO

from MTO import MotorEncriptacion


# descediente de unittest.TestCase
class Test(unittest.TestCase):
    # Casos de prueba de encriptacion
    # Cada prueba unitaria es un metodo la clase
    def testNormal1(self):
        Entrance = "Hola Mundo"
        Key = 1234
        mi_motor = MTO.MotorEncriptacion(Key)
        "encrypted_message = mi_motor.encriptar(Entrance)"
        # Cada metodo de prueba debe llamar un metodo assert
        # Proceso
        result = mi_motor.encriptar(Entrance)
        #Esperado
        expected = "‘ö’Å‘æ‘≥”≤‘ü’á’Ä‘∂’Å"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    def testNormal2(self):
        Entrance = "mE-Llamo-dAvId"
        Key = 14074
        mi_motor = MTO.MotorEncriptacion(Key)
        "encrypted_message = mi_motor.encriptar(Entrance)"
        # Cada metodo de prueba debe llamar un metodo assert
        # Proceso
        result = mi_motor.encriptar(Entrance)
        #Esperado
        expected = "„ùß„úø„úß„ùÜ„ù¶„ùõ„ùß„ù©„úß„ùû„úª„ù∞„ùÉ„ùû"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    
    def testNormal3(self):
        Entrance = "420"
        Key = 14074
        mi_motor = MTO.MotorEncriptacion(Key)
        "encrypted_message = mi_motor.encriptar(Entrance)"
        # Cada metodo de prueba debe llamar un metodo assert
        # Proceso
        result = mi_motor.encriptar(Entrance)
        #Esperado
        expected = "„úÆ„ú¨„ú™"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    def testEmptyMessage(self):
        Entrance = ""
        clave = 14074
        mi_motor = MTO.MotorEncriptacion(clave)
        
        self.assertRaises(MTO.EmptyMessage, mi_motor.encriptar, Entrance)
    
    def testEmojiMessage( self ):
        # Mensaje con emojis
        Entrance = "üòäüòäüòäüòä"
        Key = 1234

        # Crear el motor de encriptaci√≥n
        mi_motor = MTO.MotorEncriptacion(Key)

        # Proceso de encriptaci√≥n
        encrypted_message = mi_motor.encriptar(Entrance)

        # Proceso de desencriptaci√≥n
        mensaje_desencriptado = mi_motor.desencriptar(encrypted_message)

        # Comprobar que el mensaje desencriptado sea igual al original
        self.assertEqual(mensaje_desencriptado, Entrance)

        
    def testMessageSinograms(self):
        # Mensajes para probar
        Entrance = "Ê±âÂ≠ó"
        
        # Verifica si hay sinogramas en los mensajes
        self.assertTrue(MTO.has_sinogram(Entrance))

    def testMinimunCharacterKey(self):
        # Mensaje a encriptar
        entrance = "Hi bae"
        
        # Clave con menos de 4 caracteres
        clave = "140"  # Esta clave tiene solo 3 caracteres
        
        testOk = False
        try:
        # Crear el motor de encriptaci√≥n
            mi_motor = MTO.MotorEncriptacion(clave)
        except MTO.MinimunCharacters :
            testOk = True
        self.assertTrue(testOk, "No se disparo lo esperado")



    def testModifiedEncryptedMessage(self):
        # Mensaje encriptado modificado
        encrypted_message = "‘Ç‘É‘Ñ‘É‘Ç"
        # Cambia un car√°cter del mensaje encriptado
        modified_encrypted_message = list(encrypted_message)
        # Por ejemplo, cambia el primer car√°cter de "‘Ç" a "‘É"
        modified_encrypted_message[0] = "j"
        modified_encrypted_message = "".join(modified_encrypted_message)

        # Key y motor de encriptaci√≥n
        Key = 1232
        mi_motor = MTO.MotorEncriptacion(Key)

        # Proceso de desencriptaci√≥n
        try:
            result = mi_motor.desencriptar(modified_encrypted_message)
        except ValueError as e:
            # Se espera que se lance una excepci√≥n ValueError
            self.assertIsInstance(e, ValueError)
            # Verificar que el mensaje de la excepci√≥n sea el esperado
            self.assertEqual(str(e), "El mensaje encriptado est√° corrupto o ha sido modificado.")
        else:
            self.fail("Se esperaba que se lanzara una excepci√≥n ValueError pero no se lanz√≥.")
    

    def testKeyWithLetters( self):# Mensaje original
        # Mensaje original
        Entrance = "Hello World"

        # Key con solo letras
        Key = "abcd"

        # Intentar crear el motor de encriptaci√≥n deber√≠a generar una excepci√≥n
        with self.assertRaises(ValueError) as context:
            mi_motor = MTO.MotorEncriptacion(Key)

        # Verificar que la excepci√≥n tiene el mensaje esperado
        expected_error_message = "La clave no puede contener solo letras."
        self.assertEqual(expected_error_message, str(context.exception))

        
        
    def testKeyWithSpaces(self):
    # Clave con espacios
        clave_con_espacios = "12 34 56"

        # Intentar crear el motor de encriptaci√≥n con una clave que contiene espacios deber√≠a lanzar una excepci√≥n
        with self.assertRaises(ValueError) as context:
            mi_motor = MTO.MotorEncriptacion(clave_con_espacios)

        # Verificar que la excepci√≥n tiene el mensaje esperado
        expected_error_message = "La clave no puede contener espacios."
        self.assertEqual(expected_error_message, str(context.exception))

    pass
   
    def testKeyWithSpecialCharacters( self ):
        # Mensaje original
        Entrance = "Hello World"

        # Key con solo caracteres especiales
        Key = "!@#$"

        # Intentar crear el motor de encriptaci√≥n deber√≠a generar una excepci√≥n
        with self.assertRaises(ValueError) as context:
            mi_motor = MTO.MotorEncriptacion(Key)

        # Verificar que la excepci√≥n tiene el mensaje esperado
        expected_error_message = "La clave no puede contener solo caracteres especiales."
        self.assertEqual(expected_error_message, str(context.exception))

        # Asegurarse de que la prueba general tambi√©n pase
        self.assertTrue(True)

        

    #Casos de prueba de Desencripci√≥n
    
    def testCurrentKey(self):
        Entrance = "‘ö’Å‘æ‘≥”≤‘ü’á’Ä‘∂’Å"
        Key = 1234
        mi_motor = MTO.MotorEncriptacion(Key)
        "encrypted_message = mi_motor.encriptar(Entrance)"

        result = mi_motor.desencriptar(Entrance)
        #Esperado
        expected = "Hola Mundo"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    def testMessageNumber(self):
        Entrance = "‘Ç‘É‘Ñ‘É‘Ç"
        Key = 1232
        mi_motor = MTO.MotorEncriptacion(Key)
        "encrypted_message = mi_motor.encriptar(Entrance)"
        # Cada metodo de prueba debe llamar un metodo assert
        # Proceso
        result = mi_motor.desencriptar(Entrance)
        #Esperado
        expected = "23432"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    
    def testCharacterMessage(self):
        Entrance = "‡®£‡®∞‡©ï‡®§‡®ù‡™µ"
        Key = 2550
        mi_motor = MTO.MotorEncriptacion(Key)
        "encrypted_message = mi_motor.encriptar(Entrance)"
       
        # Proceso
        result = mi_motor.desencriptar(Entrance)
        #Esperado
        expected = "-:_.'¬ø"
        # para comprobar si la prueba pasa
        self.assertEqual(expected,result)

    def testModifiedEncryptedMessage(self):
        # Mensaje encriptado modificado
        encrypted_message = "‘Ç‘É‘Ñ‘É‘Ç"
        # Cambia un car√°cter del mensaje encriptado
        modified_encrypted_message = list(encrypted_message)
        # Por ejemplo, cambia el primer car√°cter de "‘Ç" a "‘É"
        modified_encrypted_message[0] = "j"
        modified_encrypted_message = "".join(modified_encrypted_message)

        # Key y motor de encriptaci√≥n
        Key = 1232
        mi_motor = MTO.MotorEncriptacion(Key)

        # Proceso de desencriptaci√≥n
        try:
            result = mi_motor.desencriptar(modified_encrypted_message)
        except ValueError as e:
            # Se espera que se lance una excepci√≥n ValueError
            self.assertIsInstance(e, ValueError)
            # Verificar que el mensaje de la excepci√≥n sea el esperado
            self.assertEqual(str(e), "El mensaje encriptado est√° corrupto o ha sido modificado.")
        else:
            self.fail("Se esperaba que se lanzara una excepci√≥n ValueError pero no se lanz√≥.")

    #DESENCRIPTAR#
    
    def test_EmptyMessage( self ):
        # Mensaje encriptado vac√≠o
        encrypted_message = ""

        # Key arbitraria
        key = 9876

        # Crear el motor de encriptaci√≥n
        mi_motor = MTO.MotorEncriptacion(key)

        # Proceso de desencriptaci√≥n deber√≠a lanzar una excepci√≥n
        with self.assertRaises(ValueError) as context:
            mi_motor.desencriptar(encrypted_message)

        # Verificar que la excepci√≥n tiene el mensaje esperado
        expected_error_message = "El mensaje no ha sido encriptado previamente o est√° vac√≠o."
        self.assertEqual(expected_error_message, str(context.exception))
        
    def testNoneMessage(self):
        # Valor None
        Entrance = None
        Key = 14074
        mi_motor = MTO.MotorEncriptacion(Key)
        
        # Intentar encriptar el valor None deber√≠a lanzar la excepci√≥n EmptyMessage
        with self.assertRaises(MTO.EmptyMessage):
            mi_motor.encriptar(Entrance)


    def testIncorectKey(self):
        # Clave correcta
        Key = 1234

        # Crear el motor de encriptaci√≥n con la clave correcta
        mi_motor = MTO.MotorEncriptacion(Key)

        # Clave incorrecta
        clave_incorrecta = 5678

        # Intentar desencriptar con una clave incorrecta deber√≠a lanzar una excepci√≥n
        with self.assertRaises(ValueError) as context:
            mi_motor.desencriptar("MensajeEncriptado", clave_incorrecta)

        # Verificar que el mensaje de error esperado est√° exactamente igual al mensaje de error real
        expected_error_message = "La clave proporcionada no coincide con la clave utilizada para encriptar el mensaje."
        self.assertEqual(expected_error_message, str(context.exception))




    def testUnencryptedmessage( self ):

        # Mensaje no encriptado
        mensaje_no_encriptado = "Hola Mundo"

        # Clave v√°lida
        clave = 1234

        # Crear el motor y desencriptar un mensaje no encriptado deber√≠a lanzar una excepci√≥n
        mi_motor = MTO.MotorEncriptacion(clave)

        with self.assertRaises(ValueError) as context:
            mi_motor.desencriptar(mensaje_no_encriptado)

        # Verificar que la excepci√≥n tiene el mensaje esperado
        expected_error_message = "El mensaje encriptado est√° corrupto o ha sido modificado."
        self.assertEqual(expected_error_message, str(context.exception))
            
        
        
    def testCorruptMessage( self ):
        # Mensaje encriptado corrupto o modificado
        encrypted_message = "MensajeModificado"

        # Clave v√°lida
        Key = 1234

        # Crear el motor y desencriptar el mensaje corrupto deber√≠a lanzar una excepci√≥n
        mi_motor = MTO.MotorEncriptacion(Key)

        with self.assertRaises(ValueError) as context:
            mi_motor.desencriptar(encrypted_message)

        # Verificar que la excepci√≥n tiene el mensaje esperado
        expected_error_message = "El mensaje encriptado est√° corrupto o ha sido modificado."
        self.assertEqual(expected_error_message, str(context.exception))
       

    def testEmptyKey( self ):
        # Mensaje encriptado vac√≠o
        encrypted_message = ""

        # Key arbitraria
        key = 9876

        # Crear el motor de encriptaci√≥n
        mi_motor = MTO.MotorEncriptacion(key)

        # Proceso de desencriptaci√≥n deber√≠a lanzar una excepci√≥n
        with self.assertRaises(ValueError) as context:
            mi_motor.desencriptar(encrypted_message)

        # Verificar que la excepci√≥n tiene el mensaje esperado
        expected_error_message = "El mensaje no ha sido encriptado previamente o est√° vac√≠o."
        self.assertEqual(expected_error_message, str(context.exception))
        pass
        # Mensaje original esperado (deber√≠a ser vac√≠o)
        expected = ""
        # Comprobar que el mensaje desencriptado sea igual al original
        self.assertEqual(expected, encrypted_message)
        


        
# Este fragmento de codigo permite ejecutar la prueb individualmente
# Va fijo en todas las pruebas
if __name__ == '__main__':
    # print( Payment.calcularCuota.__doc__)
    unittest.main()
